{"version":3,"sources":["webpack://nano-unit-converter/webpack/universalModuleDefinition","webpack://nano-unit-converter/webpack/bootstrap","webpack://nano-unit-converter/./src/index.js","webpack://nano-unit-converter/./node_modules/big.js/big.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_big","default","NE","PE","RAW_IN_MEGA","MEGA_IN_RAW","RAW_MIN_AMOUNT","RAW_MAX_AMOUNT","MEGA_MIN_AMOUNT","MEGA_MAX_AMOUNT","times","mega","undefined","Error","TypeError","megaBig","error","lt","gt","toString","raw","rawBig","__WEBPACK_AMD_DEFINE_RESULT__","GLOBAL","Big","DP","RM","MAX_DP","NAME","INVALID","INVALID_DP","INVALID_RM","P","UNDEFINED","NUMERIC","round","x","dp","rm","more","xc","e","length","unshift","pop","stringify","id","k","constructor","z","push","join","charAt","slice","abs","cmp","y","isneg","yc","j","div","a","b","bl","bt","ri","bz","ai","al","rl","q","qc","qi","shift","eq","gte","lte","minus","sub","xlty","plus","xe","ye","reverse","mod","ygtx","add","pow","one","sqrt","half","Math","toExponential","indexOf","mul","Array","toFixed","toPrecision","sd","valueOf","toJSON","_Big_","nl","test","replace","search","substring","parse","version"],"mappings":"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","file":"nano-unit-converter.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"nano-unit-converter\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"nano-unit-converter\"] = factory();\n\telse\n\t\troot[\"nano-unit-converter\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import Big from 'big.js';\n\n// Configure Big to never show exponential notation.\nBig.NE = -31;\nBig.PE = 39;\n\n/** The amount of raw in one mega. */\nconst RAW_IN_MEGA = new Big('1000000000000000000000000000000');\n\n/** The amount of mega in one raw. */\nconst MEGA_IN_RAW = new Big('.000000000000000000000000000001');\n\n/** The minimum raw amount. */\nconst RAW_MIN_AMOUNT = new Big('1');\n\n/** The maximum raw amount. */\nconst RAW_MAX_AMOUNT = new Big('340282366920938463463374607431768211455');\n\n/** The minimum mega amount. */\nconst MEGA_MIN_AMOUNT = MEGA_IN_RAW;\n\n/** The maximum mega amount. */\nconst MEGA_MAX_AMOUNT = new Big(RAW_MAX_AMOUNT).times(MEGA_IN_RAW);\n\n/**\n * Converts mega amount to raw amount.\n * @param {Number|String} mega The mega amount.\n * @throws {Error} The mega amount must be defined.\n * @throws {TypeError} The mega amount must be a string or a number.\n * @throws {Error} The mega amount is invalid.\n * @throws {Error} The mega amount must not be negative.\n * @throws {Error} The mega amount is too small.\n * @throws {Error} The mega amount is too large.\n * @returns {String} The raw amount.\n */\nexport const megaToRaw = (mega) => {\n\tif (mega === undefined) {\n\t\tthrow Error('The mega amount must be defined.');\n\t}\n\n\tif (typeof mega !== 'string' && typeof mega !== 'number') {\n\t\tthrow TypeError('The mega amount must be a string or a number.');\n\t}\n\n\tlet megaBig;\n\n\ttry {\n\t\tmegaBig = new Big(mega);\n\t} catch (error) {\n\t\tthrow Error('The mega amount is invalid.');\n\t}\n\n\tif (megaBig.lt(0)) {\n\t\tthrow Error('The mega amount must not be negative.');\n\t}\n\n\tif (megaBig.lt(MEGA_MIN_AMOUNT)) {\n\t\tthrow Error('The mega amount is too small.');\n\t}\n\n\tif (megaBig.gt(MEGA_MAX_AMOUNT)) {\n\t\tthrow Error('The mega amount is too large.');\n\t}\n\n\treturn megaBig.times(RAW_IN_MEGA).toString();\n};\n\n/**\n * Converts raw amount to mega amount.\n * @param {Number|String} raw The raw amount.\n * @throws {Error} The raw amount must be defined.\n * @throws {TypeError} The raw amount must be a string or a number.\n * @throws {Error} The raw amount is invalid.\n * @throws {Error} The raw amount must not be negative.\n * @throws {Error} The raw amount is too small.\n * @throws {Error} The raw amount is too large.\n * @returns {String} The mega amount.\n */\nexport const rawToMega = (raw) => {\n\tif (raw === undefined) {\n\t\tthrow Error('The raw amount must be defined.');\n\t}\n\n\tif (typeof raw !== 'string' && typeof raw !== 'number') {\n\t\tthrow TypeError('The raw amount must be a string or a number.');\n\t}\n\n\tlet rawBig;\n\n\ttry {\n\t\trawBig = new Big(raw);\n\t} catch (error) {\n\t\tthrow Error('The raw amount is invalid.');\n\t}\n\n\tif (rawBig.lt(0)) {\n\t\tthrow Error('The raw amount must not be negative.');\n\t}\n\n\tif (rawBig.lt(RAW_MIN_AMOUNT)) {\n\t\tthrow Error('The raw amount is too small.');\n\t}\n\n\tif (rawBig.gt(RAW_MAX_AMOUNT)) {\n\t\tthrow Error('The raw amount is too large.');\n\t}\n\n\treturn rawBig.times(MEGA_IN_RAW).toString();\n};\n","/*\r\n *  big.js v5.2.2\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  https://github.com/MikeMcl/big.js/LICENCE\r\n */\r\n;(function (GLOBAL) {\r\n  'use strict';\r\n  var Big,\r\n\r\n\r\n/************************************** EDITABLE DEFAULTS *****************************************/\r\n\r\n\r\n    // The default values below must be integers within the stated ranges.\r\n\r\n    /*\r\n     * The maximum number of decimal places (DP) of the results of operations involving division:\r\n     * div and sqrt, and pow with negative exponents.\r\n     */\r\n    DP = 20,          // 0 to MAX_DP\r\n\r\n    /*\r\n     * The rounding mode (RM) used when rounding to the above decimal places.\r\n     *\r\n     *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n     *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n     *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n     *  3  Away from zero.                                  (ROUND_UP)\r\n     */\r\n    RM = 1,             // 0, 1, 2 or 3\r\n\r\n    // The maximum value of DP and Big.DP.\r\n    MAX_DP = 1E6,       // 0 to 1000000\r\n\r\n    // The maximum magnitude of the exponent argument to the pow method.\r\n    MAX_POWER = 1E6,    // 1 to 1000000\r\n\r\n    /*\r\n     * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n     * (JavaScript numbers: -7)\r\n     * -1000000 is the minimum recommended exponent value of a Big.\r\n     */\r\n    NE = -7,            // 0 to -1000000\r\n\r\n    /*\r\n     * The positive exponent (PE) at and above which toString returns exponential notation.\r\n     * (JavaScript numbers: 21)\r\n     * 1000000 is the maximum recommended exponent value of a Big.\r\n     * (This limit is not enforced or checked.)\r\n     */\r\n    PE = 21,            // 0 to 1000000\r\n\r\n\r\n/**************************************************************************************************/\r\n\r\n\r\n    // Error messages.\r\n    NAME = '[big.js] ',\r\n    INVALID = NAME + 'Invalid ',\r\n    INVALID_DP = INVALID + 'decimal places',\r\n    INVALID_RM = INVALID + 'rounding mode',\r\n    DIV_BY_ZERO = NAME + 'Division by zero',\r\n\r\n    // The shared prototype object.\r\n    P = {},\r\n    UNDEFINED = void 0,\r\n    NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\r\n\r\n\r\n  /*\r\n   * Create and return a Big constructor.\r\n   *\r\n   */\r\n  function _Big_() {\r\n\r\n    /*\r\n     * The Big constructor and exported function.\r\n     * Create and return a new instance of a Big number object.\r\n     *\r\n     * n {number|string|Big} A numeric value.\r\n     */\r\n    function Big(n) {\r\n      var x = this;\r\n\r\n      // Enable constructor usage without new.\r\n      if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\r\n\r\n      // Duplicate.\r\n      if (n instanceof Big) {\r\n        x.s = n.s;\r\n        x.e = n.e;\r\n        x.c = n.c.slice();\r\n      } else {\r\n        parse(x, n);\r\n      }\r\n\r\n      /*\r\n       * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\r\n       * points to Object.\r\n       */\r\n      x.constructor = Big;\r\n    }\r\n\r\n    Big.prototype = P;\r\n    Big.DP = DP;\r\n    Big.RM = RM;\r\n    Big.NE = NE;\r\n    Big.PE = PE;\r\n    Big.version = '5.2.2';\r\n\r\n    return Big;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the number or string value passed to a Big constructor.\r\n   *\r\n   * x {Big} A Big number instance.\r\n   * n {number|string} A numeric value.\r\n   */\r\n  function parse(x, n) {\r\n    var e, i, nl;\r\n\r\n    // Minus zero?\r\n    if (n === 0 && 1 / n < 0) n = '-0';\r\n    else if (!NUMERIC.test(n += '')) throw Error(INVALID + 'number');\r\n\r\n    // Determine sign.\r\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\r\n\r\n    // Decimal point?\r\n    if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = n.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +n.slice(i + 1);\r\n      n = n.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = n.length;\r\n    }\r\n\r\n    nl = n.length;\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\r\n\r\n    if (i == nl) {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    } else {\r\n\r\n      // Determine trailing zeros.\r\n      for (; nl > 0 && n.charAt(--nl) == '0';);\r\n      x.e = e - i - 1;\r\n      x.c = [];\r\n\r\n      // Convert string to array of digits without leading/trailing zeros.\r\n      for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Round Big x to a maximum of dp decimal places using rounding mode rm.\r\n   * Called by stringify, P.div, P.round and P.sqrt.\r\n   *\r\n   * x {Big} The Big to round.\r\n   * dp {number} Integer, 0 to MAX_DP inclusive.\r\n   * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\r\n   * [more] {boolean} Whether the result of division was truncated.\r\n   */\r\n  function round(x, dp, rm, more) {\r\n    var xc = x.c,\r\n      i = x.e + dp + 1;\r\n\r\n    if (i < xc.length) {\r\n      if (rm === 1) {\r\n\r\n        // xc[i] is the digit after the digit that may be rounded up.\r\n        more = xc[i] >= 5;\r\n      } else if (rm === 2) {\r\n        more = xc[i] > 5 || xc[i] == 5 &&\r\n          (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\r\n      } else if (rm === 3) {\r\n        more = more || !!xc[0];\r\n      } else {\r\n        more = false;\r\n        if (rm !== 0) throw Error(INVALID_RM);\r\n      }\r\n\r\n      if (i < 1) {\r\n        xc.length = 1;\r\n\r\n        if (more) {\r\n\r\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n          x.e = -dp;\r\n          xc[0] = 1;\r\n        } else {\r\n\r\n          // Zero.\r\n          xc[0] = x.e = 0;\r\n        }\r\n      } else {\r\n\r\n        // Remove any digits after the required decimal places.\r\n        xc.length = i--;\r\n\r\n        // Round up?\r\n        if (more) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up.\r\n          for (; ++xc[i] > 9;) {\r\n            xc[i] = 0;\r\n            if (!i--) {\r\n              ++x.e;\r\n              xc.unshift(1);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; !xc[--i];) xc.pop();\r\n      }\r\n    } else if (rm < 0 || rm > 3 || rm !== ~~rm) {\r\n      throw Error(INVALID_RM);\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of Big x in normal or exponential notation.\r\n   * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n   *\r\n   * x {Big}\r\n   * id? {number} Caller id.\r\n   *         1 toExponential\r\n   *         2 toFixed\r\n   *         3 toPrecision\r\n   *         4 valueOf\r\n   * n? {number|undefined} Caller's argument.\r\n   * k? {number|undefined}\r\n   */\r\n  function stringify(x, id, n, k) {\r\n    var e, s,\r\n      Big = x.constructor,\r\n      z = !x.c[0];\r\n\r\n    if (n !== UNDEFINED) {\r\n      if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\r\n        throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\r\n      }\r\n\r\n      x = new Big(x);\r\n\r\n      // The index of the digit that may be rounded up.\r\n      n = k - x.e;\r\n\r\n      // Round?\r\n      if (x.c.length > ++k) round(x, n, Big.RM);\r\n\r\n      // toFixed: recalculate k as x.e may have changed if value rounded up.\r\n      if (id == 2) k = x.e + n + 1;\r\n\r\n      // Append zeros?\r\n      for (; x.c.length < k;) x.c.push(0);\r\n    }\r\n\r\n    e = x.e;\r\n    s = x.c.join('');\r\n    n = s.length;\r\n\r\n    // Exponential notation?\r\n    if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\r\n      s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\r\n\r\n    // Normal notation.\r\n    } else if (e < 0) {\r\n      for (; ++e;) s = '0' + s;\r\n      s = '0.' + s;\r\n    } else if (e > 0) {\r\n      if (++e > n) for (e -= n; e--;) s += '0';\r\n      else if (e < n) s = s.slice(0, e) + '.' + s.slice(e);\r\n    } else if (n > 1) {\r\n      s = s.charAt(0) + '.' + s.slice(1);\r\n    }\r\n\r\n    return x.s < 0 && (!z || id == 4) ? '-' + s : s;\r\n  }\r\n\r\n\r\n  // Prototype/instance methods\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the absolute value of this Big.\r\n   */\r\n  P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return 1 if the value of this Big is greater than the value of Big y,\r\n   *       -1 if the value of this Big is less than the value of Big y, or\r\n   *        0 if they have the same value.\r\n  */\r\n  P.cmp = function (y) {\r\n    var isneg,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new x.constructor(y)).c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    isneg = i < 0;\r\n\r\n    // Compare exponents.\r\n    if (k != l) return k > l ^ isneg ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = -1; ++i < j;) {\r\n      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ isneg ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n   * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.div = function (y) {\r\n    var x = this,\r\n      Big = x.constructor,\r\n      a = x.c,                  // dividend\r\n      b = (y = new Big(y)).c,   // divisor\r\n      k = x.s == y.s ? 1 : -1,\r\n      dp = Big.DP;\r\n\r\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);\r\n\r\n    // Divisor is zero?\r\n    if (!b[0]) throw Error(DIV_BY_ZERO);\r\n\r\n    // Dividend is 0? Return +-0.\r\n    if (!a[0]) return new Big(k * 0);\r\n\r\n    var bl, bt, n, cmp, ri,\r\n      bz = b.slice(),\r\n      ai = bl = b.length,\r\n      al = a.length,\r\n      r = a.slice(0, bl),   // remainder\r\n      rl = r.length,\r\n      q = y,                // quotient\r\n      qc = q.c = [],\r\n      qi = 0,\r\n      d = dp + (q.e = x.e - y.e) + 1;    // number of digits of the result\r\n\r\n    q.s = k;\r\n    k = d < 0 ? 0 : d;\r\n\r\n    // Create version of divisor with leading zero.\r\n    bz.unshift(0);\r\n\r\n    // Add zeros to make remainder as long as divisor.\r\n    for (; rl++ < bl;) r.push(0);\r\n\r\n    do {\r\n\r\n      // n is how many times the divisor goes into current remainder.\r\n      for (n = 0; n < 10; n++) {\r\n\r\n        // Compare divisor and remainder.\r\n        if (bl != (rl = r.length)) {\r\n          cmp = bl > rl ? 1 : -1;\r\n        } else {\r\n          for (ri = -1, cmp = 0; ++ri < bl;) {\r\n            if (b[ri] != r[ri]) {\r\n              cmp = b[ri] > r[ri] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        // If divisor < remainder, subtract divisor from remainder.\r\n        if (cmp < 0) {\r\n\r\n          // Remainder can't be more than 1 digit longer than divisor.\r\n          // Equalise lengths using divisor with extra leading zero?\r\n          for (bt = rl == bl ? b : bz; rl;) {\r\n            if (r[--rl] < bt[rl]) {\r\n              ri = rl;\r\n              for (; ri && !r[--ri];) r[ri] = 9;\r\n              --r[ri];\r\n              r[rl] += 10;\r\n            }\r\n            r[rl] -= bt[rl];\r\n          }\r\n\r\n          for (; !r[0];) r.shift();\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Add the digit n to the result array.\r\n      qc[qi++] = cmp ? n : ++n;\r\n\r\n      // Update the remainder.\r\n      if (r[0] && cmp) r[rl] = a[ai] || 0;\r\n      else r = [a[ai]];\r\n\r\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\r\n\r\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n    if (!qc[0] && qi != 1) {\r\n\r\n      // There can't be more than one zero.\r\n      qc.shift();\r\n      q.e--;\r\n    }\r\n\r\n    // Round?\r\n    if (qi > d) round(q, dp, Big.RM, r[0] !== UNDEFINED);\r\n\r\n    return q;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n   */\r\n  P.eq = function (y) {\r\n    return !this.cmp(y);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n   * false.\r\n   */\r\n  P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.gte = function (y) {\r\n    return this.cmp(y) > -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n   */\r\n  P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var i, j, t, xlty,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xc = x.c.slice(),\r\n      xe = x.e,\r\n      yc = y.c,\r\n      ye = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) {\r\n\r\n      // y is non-zero? x is non-zero? Or both are zero.\r\n      return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\r\n    }\r\n\r\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\r\n    if (a = xe - ye) {\r\n\r\n      if (xlty = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (b = a; b--;) t.push(0);\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = ((xlty = xc.length < yc.length) ? xc : yc).length;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n        if (xc[b] != yc[b]) {\r\n          xlty = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xlty) {\r\n      t = xc;\r\n      xc = yc;\r\n      yc = t;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    /*\r\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n     * needs to start at yc.length.\r\n     */\r\n    if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\r\n\r\n    // Subtract yc from xc.\r\n    for (b = i; j > a;) {\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i];) xc[i] = 9;\r\n        --xc[i];\r\n        xc[j] += 10;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xc[--b] === 0;) xc.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] === 0;) {\r\n      xc.shift();\r\n      --ye;\r\n    }\r\n\r\n    if (!xc[0]) {\r\n\r\n      // n - n = +0\r\n      y.s = 1;\r\n\r\n      // Result must be zero.\r\n      xc = [ye = 0];\r\n    }\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n   */\r\n  P.mod = function (y) {\r\n    var ygtx,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    if (!y.c[0]) throw Error(DIV_BY_ZERO);\r\n\r\n    x.s = y.s = 1;\r\n    ygtx = y.cmp(x) == 1;\r\n    x.s = a;\r\n    y.s = b;\r\n\r\n    if (ygtx) return new Big(x);\r\n\r\n    a = Big.DP;\r\n    b = Big.RM;\r\n    Big.DP = Big.RM = 0;\r\n    x = x.div(y);\r\n    Big.DP = a;\r\n    Big.RM = b;\r\n\r\n    return this.minus(x.times(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var t,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e,\r\n      xc = x.c,\r\n      ye = y.e,\r\n      yc = y.c;\r\n\r\n    // Either zero? y is non-zero? x is non-zero? Or both are zero.\r\n    if (!xc[0] || !yc[0]) return yc[0] ? y : new Big(xc[0] ? x : a * 0);\r\n\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    // Note: reverse faster than unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--;) t.push(0);\r\n      t.reverse();\r\n    }\r\n\r\n    // Point xc to the longer array.\r\n    if (xc.length - yc.length < 0) {\r\n      t = yc;\r\n      yc = xc;\r\n      xc = t;\r\n    }\r\n\r\n    a = yc.length;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\r\n    for (b = 0; a; xc[a] %= 10) b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n    if (b) {\r\n      xc.unshift(b);\r\n      ++ye;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (a = xc.length; xc[--a] === 0;) xc.pop();\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a Big whose value is the value of this Big raised to the power n.\r\n   * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n   * mode Big.RM.\r\n   *\r\n   * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n   */\r\n  P.pow = function (n) {\r\n    var x = this,\r\n      one = new x.constructor(1),\r\n      y = one,\r\n      isneg = n < 0;\r\n\r\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) throw Error(INVALID + 'exponent');\r\n    if (isneg) n = -n;\r\n\r\n    for (;;) {\r\n      if (n & 1) y = y.times(x);\r\n      n >>= 1;\r\n      if (!n) break;\r\n      x = x.times(x);\r\n    }\r\n\r\n    return isneg ? one.div(y) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big rounded using rounding mode rm\r\n   * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\r\n   * multiple of 10**-dp.\r\n   * If dp is not specified, round to 0 decimal places.\r\n   * If rm is not specified, use Big.RM.\r\n   *\r\n   * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\r\n   * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\r\n   */\r\n  P.round = function (dp, rm) {\r\n    var Big = this.constructor;\r\n    if (dp === UNDEFINED) dp = 0;\r\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) throw Error(INVALID_DP);\r\n    return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n   * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.sqrt = function () {\r\n    var r, c, t,\r\n      x = this,\r\n      Big = x.constructor,\r\n      s = x.s,\r\n      e = x.e,\r\n      half = new Big(0.5);\r\n\r\n    // Zero?\r\n    if (!x.c[0]) return new Big(x);\r\n\r\n    // Negative?\r\n    if (s < 0) throw Error(NAME + 'No square root');\r\n\r\n    // Estimate.\r\n    s = Math.sqrt(x + '');\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\r\n    if (s === 0 || s === 1 / 0) {\r\n      c = x.c.join('');\r\n      if (!(c.length + e & 1)) c += '0';\r\n      s = Math.sqrt(c);\r\n      e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\r\n      r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\r\n    } else {\r\n      r = new Big(s);\r\n    }\r\n\r\n    e = r.e + (Big.DP += 4);\r\n\r\n    // Newton-Raphson iteration.\r\n    do {\r\n      t = r;\r\n      r = half.times(t.plus(x.div(t)));\r\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\r\n\r\n    return round(r, Big.DP -= 4, Big.RM);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big times the value of Big y.\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var c,\r\n      x = this,\r\n      Big = x.constructor,\r\n      xc = x.c,\r\n      yc = (y = new Big(y)).c,\r\n      a = xc.length,\r\n      b = yc.length,\r\n      i = x.e,\r\n      j = y.e;\r\n\r\n    // Determine sign of result.\r\n    y.s = x.s == y.s ? 1 : -1;\r\n\r\n    // Return signed 0 if either 0.\r\n    if (!xc[0] || !yc[0]) return new Big(y.s * 0);\r\n\r\n    // Initialise exponent of result as x.e + y.e.\r\n    y.e = i + j;\r\n\r\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\r\n    if (a < b) {\r\n      c = xc;\r\n      xc = yc;\r\n      yc = c;\r\n      j = a;\r\n      a = b;\r\n      b = j;\r\n    }\r\n\r\n    // Initialise coefficient array of result with zeros.\r\n    for (c = new Array(j = a + b); j--;) c[j] = 0;\r\n\r\n    // Multiply.\r\n\r\n    // i is initially xc.length.\r\n    for (i = b; i--;) {\r\n      b = 0;\r\n\r\n      // a is yc.length.\r\n      for (j = a + i; j > i;) {\r\n\r\n        // Current sum of products at this digit position, plus carry.\r\n        b = c[j] + yc[i] * xc[j - i - 1] + b;\r\n        c[j--] = b % 10;\r\n\r\n        // carry\r\n        b = b / 10 | 0;\r\n      }\r\n\r\n      c[j] = (c[j] + b) % 10;\r\n    }\r\n\r\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\r\n    if (b) ++y.e;\r\n    else c.shift();\r\n\r\n    // Remove trailing zeros.\r\n    for (i = c.length; !c[--i];) c.pop();\r\n    y.c = c;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in exponential notation to dp fixed decimal\r\n   * places and rounded using Big.RM.\r\n   *\r\n   * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n   */\r\n  P.toExponential = function (dp) {\r\n    return stringify(this, 1, dp, dp);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in normal notation to dp fixed decimal\r\n   * places and rounded using Big.RM.\r\n   *\r\n   * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   */\r\n  P.toFixed = function (dp) {\r\n    return stringify(this, 2, dp, this.e + dp);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big rounded to sd significant digits using\r\n   * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * sd {number} Integer, 1 to MAX_DP inclusive.\r\n   */\r\n  P.toPrecision = function (sd) {\r\n    return stringify(this, 3, sd, sd - 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Omit the sign for negative zero.\r\n   */\r\n  P.toString = function () {\r\n    return stringify(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Include the sign for negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return stringify(this, 4);\r\n  };\r\n\r\n\r\n  // Export\r\n\r\n\r\n  Big = _Big_();\r\n\r\n  Big['default'] = Big.Big = Big;\r\n\r\n  //AMD.\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function () { return Big; });\r\n\r\n  // Node and other CommonJS-like environments that support module.exports.\r\n  } else if (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = Big;\r\n\r\n  //Browser.\r\n  } else {\r\n    GLOBAL.Big = Big;\r\n  }\r\n})(this);\r\n"],"sourceRoot":""}