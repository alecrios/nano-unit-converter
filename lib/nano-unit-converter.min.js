!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define("nano-unit-converter",[],r):"object"==typeof exports?exports["nano-unit-converter"]=r():e["nano-unit-converter"]=r()}("undefined"!=typeof self?self:this,function(){return function(e){var r={};function t(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=e,t.c=r,t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:n})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,r){if(1&r&&(e=t(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var o in e)t.d(n,o,function(r){return e[r]}.bind(null,o));return n},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t(t.s=0)}([function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.rawToMega=r.megaToRaw=void 0;var n,o=(n=t(1))&&n.__esModule?n:{default:n};o.default.NE=-31,o.default.PE=39;var i=new o.default("1000000000000000000000000000000"),s=new o.default(".000000000000000000000000000001"),f=new o.default("1"),u=new o.default("340282366920938463463374607431768211455"),c=s,a=new o.default(u).times(s);r.megaToRaw=function(e){if(void 0===e)throw Error("The mega amount must be defined.");if("string"!=typeof e&&"number"!=typeof e)throw TypeError("The mega amount must be a string or a number.");var r;try{r=new o.default(e)}catch(e){throw Error("The mega amount is invalid.")}if(r.lt(0))throw Error("The mega amount must not be negative.");if(r.lt(c))throw Error("The mega amount is too small.");if(r.gt(a))throw Error("The mega amount is too large.");return r.times(i).toString()};r.rawToMega=function(e){if(void 0===e)throw Error("The raw amount must be defined.");if("string"!=typeof e&&"number"!=typeof e)throw TypeError("The raw amount must be a string or a number.");var r;try{r=new o.default(e)}catch(e){throw Error("The raw amount is invalid.")}if(r.lt(0))throw Error("The raw amount must not be negative.");if(r.lt(f))throw Error("The raw amount is too small.");if(r.gt(u))throw Error("The raw amount is too large.");return r.times(s).toString()}},function(e,r,t){var n;!function(o){"use strict";var i,s=20,f=1,u=1e6,c=-7,a=21,l="[big.js] ",h=l+"Invalid ",d=h+"decimal places",g=h+"rounding mode",m={},p=void 0,w=/^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;function v(e,r,t,n){var o=e.c,i=e.e+r+1;if(i<o.length){if(1===t)n=o[i]>=5;else if(2===t)n=o[i]>5||5==o[i]&&(n||i<0||o[i+1]!==p||1&o[i-1]);else if(3===t)n=n||!!o[0];else if(n=!1,0!==t)throw Error(g);if(i<1)o.length=1,n?(e.e=-r,o[0]=1):o[0]=e.e=0;else{if(o.length=i--,n)for(;++o[i]>9;)o[i]=0,i--||(++e.e,o.unshift(1));for(i=o.length;!o[--i];)o.pop()}}else if(t<0||t>3||t!==~~t)throw Error(g);return e}function b(e,r,t,n){var o,i,s=e.constructor,f=!e.c[0];if(t!==p){if(t!==~~t||t<(3==r)||t>u)throw Error(3==r?h+"precision":d);for(t=n-(e=new s(e)).e,e.c.length>++n&&v(e,t,s.RM),2==r&&(n=e.e+t+1);e.c.length<n;)e.c.push(0)}if(o=e.e,t=(i=e.c.join("")).length,2!=r&&(1==r||3==r&&n<=o||o<=s.NE||o>=s.PE))i=i.charAt(0)+(t>1?"."+i.slice(1):"")+(o<0?"e":"e+")+o;else if(o<0){for(;++o;)i="0"+i;i="0."+i}else if(o>0)if(++o>t)for(o-=t;o--;)i+="0";else o<t&&(i=i.slice(0,o)+"."+i.slice(o));else t>1&&(i=i.charAt(0)+"."+i.slice(1));return e.s<0&&(!f||4==r)?"-"+i:i}m.abs=function(){var e=new this.constructor(this);return e.s=1,e},m.cmp=function(e){var r,t=this,n=t.c,o=(e=new t.constructor(e)).c,i=t.s,s=e.s,f=t.e,u=e.e;if(!n[0]||!o[0])return n[0]?i:o[0]?-s:0;if(i!=s)return i;if(r=i<0,f!=u)return f>u^r?1:-1;for(s=(f=n.length)<(u=o.length)?f:u,i=-1;++i<s;)if(n[i]!=o[i])return n[i]>o[i]^r?1:-1;return f==u?0:f>u^r?1:-1},m.div=function(e){var r=this,t=r.constructor,n=r.c,o=(e=new t(e)).c,i=r.s==e.s?1:-1,s=t.DP;if(s!==~~s||s<0||s>u)throw Error(d);if(!o[0])throw Error("[big.js] Division by zero");if(!n[0])return new t(0*i);var f,c,a,l,h,g=o.slice(),m=f=o.length,w=n.length,b=n.slice(0,f),y=b.length,E=e,T=E.c=[],j=0,M=s+(E.e=r.e-e.e)+1;for(E.s=i,i=M<0?0:M,g.unshift(0);y++<f;)b.push(0);do{for(a=0;a<10;a++){if(f!=(y=b.length))l=f>y?1:-1;else for(h=-1,l=0;++h<f;)if(o[h]!=b[h]){l=o[h]>b[h]?1:-1;break}if(!(l<0))break;for(c=y==f?o:g;y;){if(b[--y]<c[y]){for(h=y;h&&!b[--h];)b[h]=9;--b[h],b[y]+=10}b[y]-=c[y]}for(;!b[0];)b.shift()}T[j++]=l?a:++a,b[0]&&l?b[y]=n[m]||0:b=[n[m]]}while((m++<w||b[0]!==p)&&i--);return T[0]||1==j||(T.shift(),E.e--),j>M&&v(E,s,t.RM,b[0]!==p),E},m.eq=function(e){return!this.cmp(e)},m.gt=function(e){return this.cmp(e)>0},m.gte=function(e){return this.cmp(e)>-1},m.lt=function(e){return this.cmp(e)<0},m.lte=function(e){return this.cmp(e)<1},m.minus=m.sub=function(e){var r,t,n,o,i=this,s=i.constructor,f=i.s,u=(e=new s(e)).s;if(f!=u)return e.s=-u,i.plus(e);var c=i.c.slice(),a=i.e,l=e.c,h=e.e;if(!c[0]||!l[0])return l[0]?(e.s=-u,e):new s(c[0]?i:0);if(f=a-h){for((o=f<0)?(f=-f,n=c):(h=a,n=l),n.reverse(),u=f;u--;)n.push(0);n.reverse()}else for(t=((o=c.length<l.length)?c:l).length,f=u=0;u<t;u++)if(c[u]!=l[u]){o=c[u]<l[u];break}if(o&&(n=c,c=l,l=n,e.s=-e.s),(u=(t=l.length)-(r=c.length))>0)for(;u--;)c[r++]=0;for(u=r;t>f;){if(c[--t]<l[t]){for(r=t;r&&!c[--r];)c[r]=9;--c[r],c[t]+=10}c[t]-=l[t]}for(;0===c[--u];)c.pop();for(;0===c[0];)c.shift(),--h;return c[0]||(e.s=1,c=[h=0]),e.c=c,e.e=h,e},m.mod=function(e){var r,t=this,n=t.constructor,o=t.s,i=(e=new n(e)).s;if(!e.c[0])throw Error("[big.js] Division by zero");return t.s=e.s=1,r=1==e.cmp(t),t.s=o,e.s=i,r?new n(t):(o=n.DP,i=n.RM,n.DP=n.RM=0,t=t.div(e),n.DP=o,n.RM=i,this.minus(t.times(e)))},m.plus=m.add=function(e){var r,t=this,n=t.constructor,o=t.s,i=(e=new n(e)).s;if(o!=i)return e.s=-i,t.minus(e);var s=t.e,f=t.c,u=e.e,c=e.c;if(!f[0]||!c[0])return c[0]?e:new n(f[0]?t:0*o);if(f=f.slice(),o=s-u){for(o>0?(u=s,r=c):(o=-o,r=f),r.reverse();o--;)r.push(0);r.reverse()}for(f.length-c.length<0&&(r=c,c=f,f=r),o=c.length,i=0;o;f[o]%=10)i=(f[--o]=f[o]+c[o]+i)/10|0;for(i&&(f.unshift(i),++u),o=f.length;0===f[--o];)f.pop();return e.c=f,e.e=u,e},m.pow=function(e){var r=this,t=new r.constructor(1),n=t,o=e<0;if(e!==~~e||e<-1e6||e>1e6)throw Error(h+"exponent");for(o&&(e=-e);1&e&&(n=n.times(r)),e>>=1;)r=r.times(r);return o?t.div(n):n},m.round=function(e,r){var t=this.constructor;if(e===p)e=0;else if(e!==~~e||e<-u||e>u)throw Error(d);return v(new t(this),e,r===p?t.RM:r)},m.sqrt=function(){var e,r,t,n=this,o=n.constructor,i=n.s,s=n.e,f=new o(.5);if(!n.c[0])return new o(n);if(i<0)throw Error(l+"No square root");0===(i=Math.sqrt(n+""))||i===1/0?((r=n.c.join("")).length+s&1||(r+="0"),s=((s+1)/2|0)-(s<0||1&s),e=new o(((i=Math.sqrt(r))==1/0?"1e":(i=i.toExponential()).slice(0,i.indexOf("e")+1))+s)):e=new o(i),s=e.e+(o.DP+=4);do{t=e,e=f.times(t.plus(n.div(t)))}while(t.c.slice(0,s).join("")!==e.c.slice(0,s).join(""));return v(e,o.DP-=4,o.RM)},m.times=m.mul=function(e){var r,t=this,n=t.constructor,o=t.c,i=(e=new n(e)).c,s=o.length,f=i.length,u=t.e,c=e.e;if(e.s=t.s==e.s?1:-1,!o[0]||!i[0])return new n(0*e.s);for(e.e=u+c,s<f&&(r=o,o=i,i=r,c=s,s=f,f=c),r=new Array(c=s+f);c--;)r[c]=0;for(u=f;u--;){for(f=0,c=s+u;c>u;)f=r[c]+i[u]*o[c-u-1]+f,r[c--]=f%10,f=f/10|0;r[c]=(r[c]+f)%10}for(f?++e.e:r.shift(),u=r.length;!r[--u];)r.pop();return e.c=r,e},m.toExponential=function(e){return b(this,1,e,e)},m.toFixed=function(e){return b(this,2,e,this.e+e)},m.toPrecision=function(e){return b(this,3,e,e-1)},m.toString=function(){return b(this)},m.valueOf=m.toJSON=function(){return b(this,4)},(i=function e(){function r(t){var n=this;if(!(n instanceof r))return t===p?e():new r(t);t instanceof r?(n.s=t.s,n.e=t.e,n.c=t.c.slice()):function(e,r){var t,n,o;if(0===r&&1/r<0)r="-0";else if(!w.test(r+=""))throw Error(h+"number");for(e.s="-"==r.charAt(0)?(r=r.slice(1),-1):1,(t=r.indexOf("."))>-1&&(r=r.replace(".","")),(n=r.search(/e/i))>0?(t<0&&(t=n),t+=+r.slice(n+1),r=r.substring(0,n)):t<0&&(t=r.length),o=r.length,n=0;n<o&&"0"==r.charAt(n);)++n;if(n==o)e.c=[e.e=0];else{for(;o>0&&"0"==r.charAt(--o););for(e.e=t-n-1,e.c=[],t=0;n<=o;)e.c[t++]=+r.charAt(n++)}}(n,t),n.constructor=r}return r.prototype=m,r.DP=s,r.RM=f,r.NE=c,r.PE=a,r.version="5.2.2",r}()).default=i.Big=i,void 0===(n=function(){return i}.call(r,t,r,e))||(e.exports=n)}()}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,